#|
Test for 3d-math.rkt provided functions 
|#

#lang racket
(require math/matrix "3d-math.rkt" test-engine/racket-tests)

;; matrix=? works for comparing 2 square matrices
(define (matrix=? bound m1 m2)
  (if (= (square-matrix-size m1)
         (square-matrix-size m2))
      (list=? bound (matrix->list m1) (matrix->list m2))
      false))

(define (list=? bound l1 l2)
  (cond [(and (empty? l1) (empty? l2)) true]
        [else (or (within bound (first l1) (first l2))
                  (list=? bound (rest l1) (rest l2)))]))

(define (within bound v1 v2)
  (< (abs (- v1 v2)) bound))

(check-expect (matrix=?
               0
               (matrix [[1 2 3 4]
                        [1 2 3 4]
                        [1 2 3 4]
                        [1 2 3 4]])
               (matrix [[1 2 3 4]
                        [1 2 3 4]
                        [1 2 3 4]
                        [1 2 3 4]]))
              true)

;;==================================================================================
;;==================================================================================
(check-expect (matrix=?  0 (translate (identity-matrix 4)
                                      #(0.0 0.0 -4.0))
                         (matrix [[1.000000 0.000000 0.000000 0.000000]
                                  [0.000000 1.000000 0.000000 0.000000] 
                                  [0.000000 0.000000 1.000000 -4.000000] 
                                  [0.000000 0.000000 0.000000 1.000000]])) true)

(check-expect (matrix=? 0 (translate (identity-matrix 4)
                                     #(100.0 200.0 300.0))
                        (matrix [[1.000000 0.000000 0.000000 100.000000] 
                                 [0.000000 1.000000 0.000000 200.000000]
                                 [0.000000 0.000000 1.000000 300.000000] 
                                 [0.000000 0.000000 0.000000 1.000000 ]]))true)

(check-expect (matrix=? 0 (translate (identity-matrix 4)
                                     #(-100.0 -200.0 -300.0))
                        (matrix [[1.000000 0.000000 0.000000 -100.000000] 
                                 [0.000000 1.000000 0.000000 -200.000000]
                                 [0.000000 0.000000 1.000000 -300.000000] 
                                 [0.000000 0.000000 0.000000 1.000000]])) true) 

(check-expect (matrix=? 0 (translate (identity-matrix 4)
                                     #(0.0 1.0 -4.0))
                        (matrix [[1.000000 0.000000 0.000000 0.000000] 
                                 [0.000000 1.000000 0.000000 1.000000] 
                                 [0.000000 0.000000 1.000000 -4.000000] 
                                 [0.000000 0.000000 0.000000 1.000000]])) true)

(check-expect (matrix=? 0 (translate (identity-matrix 4)
                                     #(-2.0 -0.0 4.0))
                        (matrix [[1.000000 0.000000 0.000000 -2.000000] 
                                 [0.000000 1.000000 0.000000 0.000000]
                                 [0.000000 0.000000 1.000000 4.000000]
                                 [0.000000 0.000000 0.000000 1.000000]])) true) 

;;==================================================================================
;;==================================================================================
(check-expect (matrix=? 0 (lookat #(0.0 2.0 0.0) #(0.0 0.0 -4.0) #(0.0 1.0 0.0))
                        (matrix [[1.000000 -0.000000 0.000000 -0.000000] 
                                 [0.000000 0.894427 -0.447214 -1.788854] 
                                 [-0.000000 0.447214 0.894427 -0.894427] 
                                 [0.000000 0.000000 0.000000 1.000000]])) true)

(check-expect (matrix=? 0 (lookat #(1.3 5.0 5.0) #(1.0 -5.0 -2.0) #(10.0 12.0 4.0))
                        (matrix [[0.348260 -0.544552 0.763006 -1.545007] 
                                 [0.937076 0.180907 -0.298599 -0.629739] 
                                 [0.024570 0.818985 0.573289 -6.993310] 
                                 [0.000000 0.000000 0.000000 1.000000]])) true)

(check-expect (matrix=? 0 (lookat #(-4.0 3.4 500.0) #(-13.0 35.0 12.0) #(13.0 65.0 45.0))
                        (matrix [[0.983890 -0.176312 -0.029562 19.316235] 
                                 [0.177823 0.982212 0.060323 -32.789574] 
                                 [0.018401 -0.064608 0.997741 -498.577240] 
                                 [0.000000 0.000000 0.000000 1.000000]])) true) 


;;==================================================================================
;;==================================================================================
(check-expect (matrix=? 0 (perspective 45.0 1.0 0.4 91.0)
                        (matrix [[2.414213 0.000000 0.000000 0.000000] 
                                 [0.000000 2.414213 0.000000 0.000000] 
                                 [0.000000 0.000000 -1.008830 -0.803532] 
                                 [0.000000 0.000000 -1.000000 0.000000]])) true)
(check-expect (matrix=? 0 (perspective 54.3 2.4 2.3 45.0)
                        (matrix [[0.812489 0.000000 0.000000 0.000000] 
                                 [0.000000 1.949973 0.000000 0.000000] 
                                 [0.000000 0.000000 -1.107728 -4.847775] 
                                 [0.000000 0.000000 -1.000000 0.000000]])) true) 

(check-expect (matrix=? 0 (perspective 76.1 0.45 6.3 78.0)
                        (matrix [[2.839204 0.000000 0.000000 0.000000]
                                 [0.000000 1.277642 0.000000 0.000000]
                                 [0.000000 0.000000 -1.175732 -13.707114] 
                                 [0.000000 0.000000 -1.000000 0.000000]])) true)
(check-expect (matrix=? 0 (perspective 340.34 0.31 0.1 24.0)
                        (matrix [[-18.617298 0.000000 0.000000 0.000000] 
                                 [0.000000 -5.771362 0.000000 0.000000] 
                                 [0.000000 0.000000 -1.008368 -0.200837] 
                                 [0.000000 0.000000 -1.000000 0.000000]])) true) 

;;==================================================================================
;;==================================================================================




;;==================================================================================
;;==================================================================================

(test)





